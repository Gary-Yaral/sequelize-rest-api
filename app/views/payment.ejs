<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Payment</title>
  <style>
    *{
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: Arial, Helvetica, sans-serif;
    }

    body {
      width: 100%;
      min-height: 100vh;
      background: gray;
      display: grid;
      place-content: center;
      overflow-y: auto;
      padding: 2rem 1rem;
    }

    form {
      width: 100%;
      max-width: 600px;
      background: white;
      padding: 1rem;
      display: flex;
      flex-direction: column;
      gap: 2rem;
      border-radius: 5px;
    }

    fieldset {
      padding: 1rem;
      border: 1px solid rgb(0, 217, 255);
    }

    h3 {
      width: 100%;
      text-align: center;
      margin-bottom: 1rem;
    }
    
    .title {
      width: 100%;
      font-size: clamp(2rem, 4vw, 3rem);
      text-align: center;
      margin-bottom: 2rem;
      font-family: Arial, Helvetica, sans-serif;
    }

    .buttons-block {
      display: flex;
      flex-wrap: wrap;
      width: 100%;
      gap: 2rem
    }

    button[type='submit'] {
      border-radius: 10px;
      border: none;
      background: rgb(29, 128, 194);
      color: white;
      height: 2.5rem;
      flex: 1;
      cursor: pointer;
    }

    input[type=file] {
      flex: 1;
      position: relative;
      border-radius: 10px;
      height: 2.5rem;
    }

    input[type=file]::after {
      content: 'Cargar voucher';
      display: grid;
      place-content: center;
      width: 100%;
      height: 100%;
      background: rgb(0, 0, 0);
      color: white;
      position: absolute;
      border-radius: 10px;
      top: 0;
      left: 0;
      z-index: 2;
      cursor: pointer;
    }
    
    .preview {
      display: flex;
      width: 100%;
      height: fit-content;
    }

    .preview img {
      width: 100%;
      height: fit-content;
    }

    .hidden {
      display: none;
    }

  </style>
</head>
<body>
  <form>
    <h1 class="title">Procesar pago</h1>
    <fieldset>
      <h3>Datos del pago</h3>
      <p>
        <b>Cliente: </b><%= Reservation.UserRole.dataValues.User.dataValues.name + ' ' + Reservation.UserRole.dataValues.User.dataValues.lastname %></br>
        <b>Local: </b><%= Reservation.Room.name %></br>
        <b>Fecha: </b><%= Reservation.date %></br>
        <b>Horario: </b><%= Reservation.ReservationSchedules[0].dataValues.initialTime %> - <%= Reservation.ReservationSchedules[0].dataValues.finalTime %></br>
        <b>Tipo Reserva: </b><%= Reservation.ScheduleType.dataValues.type %></br>
        <b>Total: </b>$<%= total %></br>
      </p>
    </fieldset>
    <div class="buttons-block">
      <input id='paymentId' type="hidden" value="<%= id %>">
      <input id="img-file" type="file" class="file">
      <button type="submit">Enviar</button>
    </div>
    <div id="preview" class="preview hidden">
      <img src="" id="img-loaded" alt="preview image">
    </div>
  </form>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.socket.io/4.7.5/socket.io.min.js" integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO" crossorigin="anonymous"></script>
  <script>
    const fileInput = document.querySelector('#img-file')
    const preview = document.querySelector('#preview')
    const image = preview.querySelector('#img-loaded')
    const form = document.querySelector('form')
    var backup = []
    document.addEventListener('DOMContentLoaded', () => {
      // Como estamos dentro del mismo servidor no se le pasa host ni puerto
      const socket = io();
      socket.on('payment-status-updated', (data) => {
        console.log(data)
        window.location.reload()
      });
    });
    form.onsubmit = ($event) => {
      $event.preventDefault()
      if(backup.length === 0) {
        return Swal.fire({
          title: '¡Error!',
          text: 'Debes cargar un comprobante',
          icon: 'error',
          confirmButtonText: 'Ok, entiendo'
        })
      }

      Swal.fire({
        title: '¡Atención!',
        text: '¿Deseas enviar el comprobante?',
        icon: 'info',
        showCancelButton: true,
        cancelButtonText: 'Cancelar',
        confirmButtonText: 'Si, enviar'
      }).then(async (action) => {
        if(action.isConfirmed) {
          await sendData()
        }
      })
    }

    async function sendData() {
      const id = document.querySelector('#paymentId').value
      const formData = getFormData()
      const response = await (await fetch(`/api/payments/voucher/${id}`, {
        method: 'PUT',
        body: formData
      })).json()
      if(response.error) {
        Swal.fire({
          title: '¡Error!',
          text: response.msg,
          icon: 'error',
          confirmButtonText: 'Ok, entiendo'
        }).then((action) => {
          if(action.isConfirmed) {
            window.location.reload()
          }
        })
      }
      if(response.done) {
        Swal.fire({
          title: '¡OK!',
          text: response.msg,
          icon: 'success',
          confirmButtonText: 'Ok, Listo'
        }).then((action) => {
          if(action.isConfirmed) {
            window.location.reload()
          }
        })
      }
    }

    function getFormData() {
      try {
        const formData = new FormData()
        formData.append('voucher', backup[0])
        return formData
      } catch (error) {
        console.log(error)
        return {
          error: true, 
          msg: 'Error al crear y guardar datos en el FormData'
        }
      }
    }

    fileInput.onchange = ($event) => {
      const files = $event.target.files
      if($event.target.files.length === 0 && backup.length === 0) {
        preview.classList.add('hidden')
        image.src = "" 
        return
      }
      if($event.target.files.length > 0 ) {
        backup = $event.target.files
      } 
      preview.classList.remove('hidden')
      // Creamos el reader
      const reader = new FileReader()
      reader.onload = ($evt) => {
        image.src = $evt.target.result
      }
      if($event.target.files.length > 0) {
        backup = $event.target.files
      }
      reader.readAsDataURL(backup[0])
    }
  </script>
</body>
</html>